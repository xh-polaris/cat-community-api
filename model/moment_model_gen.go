// Code generated by goctl. DO NOT EDIT!
package model

import (
	"context"
	"time"

	"github.com/zeromicro/go-zero/core/stores/monc"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

var prefixMomentCacheKey = "cache:moment:"

type momentModel interface {
	Insert(ctx context.Context, data *Moment) error
	FindOne(ctx context.Context, id string) (*Moment, error)
	Update(ctx context.Context, data *Moment) error
	Delete(ctx context.Context, id string) error
}

type defaultMomentModel struct {
	conn *monc.Model
}

func newDefaultMomentModel(conn *monc.Model) *defaultMomentModel {
	return &defaultMomentModel{conn: conn}
}

func (m *defaultMomentModel) Insert(ctx context.Context, data *Moment) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	key := prefixMomentCacheKey + data.ID.Hex()
	_, err := m.conn.InsertOne(ctx, key, data)
	return err
}

func (m *defaultMomentModel) FindOne(ctx context.Context, id string) (*Moment, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Moment
	key := prefixMomentCacheKey + id
	err = m.conn.FindOne(ctx, key, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case monc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMomentModel) Update(ctx context.Context, data *Moment) error {
	data.UpdateAt = time.Now()
	key := prefixMomentCacheKey + data.ID.Hex()
	_, err := m.conn.ReplaceOne(ctx, key, bson.M{"_id": data.ID}, data)
	return err
}

func (m *defaultMomentModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	key := prefixMomentCacheKey + id
	_, err = m.conn.DeleteOne(ctx, key, bson.M{"_id": oid})
	return err
}
